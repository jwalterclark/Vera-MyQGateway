local https = require("ssl.https")
local json = require("dkjson")
  
--------load a local mock module when needed so we can easily run outside of Vera---------
luup = luup ~= nil and luup or require "luup"
------------------------------------------------------------------------------------------

--Initialize randomizer for PKCE.
math.randomseed(math.floor(os.time()))

local MYQGATEWAY_SID = "urn:macrho-com:serviceId:MyQGateway1"
local GDO_SID = "urn:upnp-org:serviceId:SwitchPower1"
local GDO_DEVICE_TYPE = "urn:schemas-upnp-org:device:SwitchPower:1"
local LAMP_SID = "urn:upnp-org:serviceId:SwitchPower1"
local LAMP_DEVICE_TYPE = "urn:schemas-upnp-org:device:BinaryLight:1"

local VERSION = "v3.0 03-28-2021"
local PLUGIN_VARS = {
  REFRESH_INTERVAL = "RefreshInterval",
  REFRESH_AFTER_CHANGE_INTERVAL = "RefreshAfterChangeInterval",
  USERNAME = "Username",
  PASSWORD = "Password",
  DEBUG_MODE = "DebugMode",
  DEBUG_MODE_TEXT = "DebugModeTxt",
  LAST_CHECK = "LastCheck",
  LAST_TRIP = "LastTrip",
  STATUS = "Status",
  NUM_DOORS = "NumDoors",
  NUM_LIGHTS = "NumLights",
  TOKEN_TIMESTAMP = "Timestamp"
}

local LOGLEVELS = {
  CRITICAL = 1, -- Critical error. Something is wrong that shouldn't happen.
  WARN = 2, -- Warning. This is something to make note of, though it's not always a problem.
  VARIABLE_CHANGE = 6, -- Variable. A UPnP Variable has changed.
  GENERAL = 10, -- General Status. There are lots of these messages to indicate something happening in the system.
  OUTBOUND_DATA = 41, -- Outgoing data going to the external devices, such as the Z-Wave dongle and Luup plugins talking to the serial/network devices.
  INCOMING_DATA = 42 -- Incoming data. (as above)
}

local PLUGIN_CONFIG = {
  FORCE_DEBUG								= false, -- overrides user configured debug_mode - normally false
	DEBUG_MODE								= true,
	USERNAME									= "",
	PASSWORD									= "",
  ACCOUNTID                 = "",
	SECURITY_TOKEN						= "",
	APPID											= "",
	NAME											= "MyQGateway",
  LAST_TOKEN_REFRESH        = os.time()-60*60*24, --yesterday by default
  MAX_TOKEN_AGE             = 3600, -- in seconds
  REFRESH_AFTER_CHANGE      = 10, -- in seconds
  REFRESH_INTERVAL          = 30, -- in seconds
  CLEAR_TASK_AFTER          = 30 -- in seconds
}


-- Found: http://forum.micasaverde.com/index.php/topic,7458.msg47733.html#msg47733
-- Probably NOT the way I want to do this but works for now
local child_id_lookup_table = {}
local child_deviceid_lookup_table = {} -- Reverses for looking up by Vera DeviceId

local TASK_ERROR = 2
local TASK_ERROR_PERM = -2
local TASK_SUCCESS = 4
local MSG_CLASS = "MyQ Gateway"
local taskHandle = -1
local MyQGatewayID = nil -- Device ID
local COOKIEJAR = {}

local UTIL = {
    
  base64encode = function (self, data)
    local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' -- You will need this for encoding/decoding
    return ((data:gsub('.', function(x) 
        local r,b='',x:byte()
        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
        return r;
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c=0
        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
        return b:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#data%3+1])
  end,
  
	initVar = function(self, serviceId, variable, default, deviceId)
		
    if (variable == nil or serviceId == nil or default == nil) then return end
    
    if (type(default) == "boolean") then 
      default = default and "1" or "0" 
    end
    
		local val = luup.variable_get(serviceId, variable, deviceId)
		
    if (val == nil or val == "") then 
      luup.variable_set(serviceId, variable, default, deviceId) 
    end
	end,

	getFriendlyTimestamp = function(self, timestamp)
		return os.date("%a %b %d %Y, %X", timestamp)
	end,

	sanitizeText = function(self, text)
		if (PLUGIN_CONFIG.USERNAME and (PLUGIN_CONFIG.USERNAME ~= "")) then
			text = text:gsub(PLUGIN_CONFIG.USERNAME,"********")
		end
		if (PLUGIN_CONFIG.PASSWORD and (PLUGIN_CONFIG.PASSWORD ~= "")) then
			text = text:gsub(PLUGIN_CONFIG.PASSWORD,"********")
		end
		return text
	end,
  
  base64urlencode = function(self,str)
      str = str:gsub("(%+)", "-")
      str = str:gsub("(/)", "_")
      str = str:gsub("(%=)", "")
      return str
    end,
    
    shellExecute = function(self, cmd, Output)
      if (Output == nil) then Output = true end
      local file = assert(io.popen(cmd, 'r'))
      if (Output == true) then
        local cOutput = file:read('*all')
        file:close()
        return cOutput
      else
        file:close()
        return
      end
    end,
    
    buildKeyValueString = function(self, values, delimiter)
      delimiter = delimiter ~= nil and delimiter or "&"
      
      local str = ""
          for k,v in pairs(values) do
            str = str..delimiter..k.."="..v
          end
      return self:trim(str, delimiter)
    end,
    
    generateCodeVerifier = function(self, length)
    
      local charset = {}  do -- [0-9a-zA-Z]
        for c = 48, 57  do table.insert(charset, string.char(c)) end --numbers
        for c = 65, 90  do table.insert(charset, string.char(c)) end --A-Z
        for c = 97, 122 do table.insert(charset, string.char(c)) end --a-z
      end
      
      local specialChars = "-._~"
      for i = 1, #specialChars do
        local s= string.sub(specialChars, i, i)
        table.insert(charset, s)
      end
      
      local res = ""
      for _ = 1, length do
        res = res .. charset[math.random(1, #charset)]
      end
      return res
    end,
  
    startsWith = function(self, str, pattern) 
      return string.find(str, '^' .. pattern) ~= nil
    end,
    
    urldecode = function(self, url)
      local hex_to_char = function(x)
        return string.char(tonumber(x, 16))
      end

      if url == nil then
        return
      end
      url = url:gsub("+", " ")
      url = url:gsub("%%(%x%x)", hex_to_char)
      return url
    end,
    
    trim = function(self, s, trimChar)
        trimChar = trimChar ~=nil and trimChar or ' '
      if (s == nil) then return s end
      
      local l = 1
      while string.sub(s,l,l) == trimChar do
        l = l+1
      end
      local r = string.len(s)
      while string.sub(s,r,r) == trimChar do
        r = r-1
      end
      return string.sub(s,l,r)
    end,
    
    cutString = function(self, srcString, startPattern,endPattern)
      local idx = string.find(srcString, startPattern)+#startPattern
      local subStr = string.sub(srcString, idx, #srcString)
      idx = endPattern ~= nil and string.find(subStr,endPattern) or #subStr+1
      return string.sub(subStr, 1, idx-1)
    end,
    
    split = function(self, str, sep)
      local sep, fields = sep or ":", {}
      local pattern = string.format("([^%s]+)", sep)
      string.gsub(str, pattern, function(c) fields[#fields+1] = c end)
      return fields
    end,
    
    parseCookies = function(self,cookieHeaders)
      for _,v in pairs(self:split(cookieHeaders, ",")) do
        local cookieVal = self:split(v, ";")[1]
        local kv = self:split(cookieVal, "=")
        COOKIEJAR[self:trim(kv[1])] = self:trim(kv[2])
      end
      
      return self:buildKeyValueString(COOKIEJAR, ";")
      
    end,
    
    request = function(self, url, method, headers, body, logRequest, logResponse)

      headers = headers ~= nil and headers or {}

      headers["Host"] = self:split(url,"//")[2]
      headers["Accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
      headers["Accept-Language"] = "en-US,en;q=0.9"
      headers["User-Agent"]  = headers["User-Agent"] ~= nil and headers["User-Agent"] or "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36"

      if (logRequest == true) then
        debug(method.." "..url)
        if (headers ~= nil) then
          for k,v in pairs(headers) do
            debug(k..": "..v)
          end
        end
        if (body ~= nil) then
          debug(body)
        end
        debug("--------------------------------------------------------------------------------------------------------------------------")
      end

      local responseChunks = {}

      local success, statusCode, responseHeaders = https.request{
          url = url,
          method = method,
          headers = headers,
          source = body ~=nil and ltn12.source.string(body) or nil,
          protocol = "tlsv1_2",
          redirect = false,
          sink = ltn12.sink.table(responseChunks)
        }

      local responseContent = (responseChunks ~= nil and table.maxn(responseChunks) > 0 and table.concat(responseChunks)) or nil

      if (logResponse == true) then
        for k,v in pairs(responseHeaders) do
          debug(k..": "..v)
        end
        
        if (responseContent ~= nil) then
          debug(responseContent)
        end
        
        debug("--------------------------------------------------------------------------------------------------------------------------")
      end

      return success, statusCode, responseHeaders, responseContent
    end,
    
    debug = function(self, text, level, forced)
      if (forced == nil) then forced = false end
      if ((PLUGIN_CONFIG.DEBUG_MODE == true) or (forced == true)) then
        -- sanitize the debug text
        text = self:sanitizeText(text)
        if (#text < 7000) then
          if (level == nil) then
            luup.log((text or "NIL"), LOGLEVELS.WARN)
          else
            luup.log((text or "NIL"), level)
          end
        else
          -- split the output into multiple debug lines
          local prefix_string = ""
          local _,debug_prefix,_ = text:find("): ")
          if (debug_prefix) then
            prefix_string = text:sub(1,debug_prefix)
            text = text:sub(debug_prefix + 1)
          end
          while (#text > 0) do
            local debug_text = text:sub(1,7000)
            text = text:sub(7001)
            if (level == nil) then
              luup.log((prefix_string..(debug_text or "NIL")), LOGLEVELS.WARN)
            else
              luup.log((prefix_string..(debug_text or "NIL")),level)
            end
          end
        end
      end
    end
}

UPnP = {
	NAME = "UPnP",
	
  changeDeviceState = function(self, lul_device, lul_settings)
    local logPrefix = PLUGIN_CONFIG.NAME.."::"..self.NAME.."::changeDeviceState"
    local targetValue = lul_settings.newTargetValue
    
    if (targetValue ~= "1" and targetValue ~= "0") then 
      log(logPrefix.."Unknown state value "..targetValue.." for device "..lul_device, LOGLEVELS.ERROR)
      return 2, 0
    end
    
    local deviceFamily = lul_settings.deviceFamily
    
    if (deviceFamily == nil) then
      log(logPrefix.."Unspecified device family when requesting "..targetValue.." for device "..lul_device, LOGLEVELS.ERROR)
      return 2, 0
    end
    
    local serviceId
    if (deviceFamily == "garagedoor") then
      serviceId = GDO_SID
    elseif (deviceFamily == "lamp") then
      serviceId = LAMP_SID
    else
      log(logPrefix.."Unsupported device family ".. deviceFamily.." when requesting "..targetValue.." for device "..lul_device, LOGLEVELS.ERROR)
      return 2, 0
    end

		local myQSerialNumber = child_deviceid_lookup_table[lul_device]
		    
    debug(logPrefix.."device/myQid/newStatus to "..(lul_device or "NIL").. "/" ..(myQSerialNumber or "NIL").. "/" .. (lul_settings.newTargetValue or "NIL"))
    
    local result = MYQ_API:changeDeviceStatus(PLUGIN_CONFIG.SECURITY_TOKEN, PLUGIN_CONFIG.ACCOUNTID, myQSerialNumber, MyQGatewayID, deviceFamily, targetValue)
		
    if (result == false) then
      log(logPrefix.."Failed calling myQ API to change status on device "..lul_device, LOGLEVELS.ERROR)
      return 2, 0
    end
    
    luup.variable_set(serviceId, PLUGIN_VARS.STATUS, tonumber(targetValue), lul_device)
    return 4, 0
	end,
  	
  setCredentials = function(self, lul_device, lul_settings)
		local Username = lul_settings.newUsername or ""
		local Password = lul_settings.newPassword or ""
		if Username ~= "" then
			luup.variable_set(MYQGATEWAY_SID,PLUGIN_VARS.USERNAME,Username,lul_device)
		end
		if Password ~= "" then
			luup.variable_set(MYQGATEWAY_SID,PLUGIN_VARS.PASSWORD,Password,lul_device)		 
		end 
		task("Please wait....Re-initializing myQ after password update.", TASK_ERROR_PERM)
		init(lul_device)
		return 4, nil
	end,

	toggleDebugMode = function(self, lul_device)
        
    PLUGIN_CONFIG.DEBUG_MODE = not PLUGIN_CONFIG.DEBUG_MODE
    
    local varValue = (PLUGIN_CONFIG.DEBUG_MODE and "1" or "0")
    local varTextValue = (PLUGIN_CONFIG.DEBUG_MODE and "ENABLED" or "DISABLED")
		task("DEBUG MODE "..varTextValue.."!",TASK_SUCCESS)
    luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.DEBUG_MODE, varValue, lul_device)
    luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.DEBUG_MODE_TEXT, varTextValue, lul_device)
      
		debug("("..PLUGIN_CONFIG.NAME.."::"..self.NAME.."::ToggleDebugMode): Debug mode now ["..(PLUGIN_CONFIG.DEBUG_MODE and "ENABLED" or "DISABLED").."].")
	end

}

function debug(text, level, forced)
    UTIL:debug(text, level, forced)
end

--Utility function to prefix MSG_CLASS to all log calls
function log(message,msgLevel)
	if (msgLevel ~= nil) then debug(message,msgLevel,true) else debug(message,nil,true) end
end

local DEVICE_ICONS = {
	DATA = {
    ["MyQ_gateway.png"] = "89504E470D0A1A0A0000000D494844520000003C0000003C08060000003AFCD972000000206348524D0000870F00008C0F0000FD520000814000007D790000E98B00003CE5000019CC733C857700000103694343504943432050726F66696C65000028CF6360609260000226010686DCBC92A22077278588C82805062490985C5CC0801B3032307CBB062219182EEB32900E3853528B9381F407202E29025A0E343205C8164987B02B40EC2408BB07C42E0A097206B21700D91AE948EC24247679494109907D02A43EB9A008C4BE0364DBE4E6942623DCCDC0939A171A0CA423805886A1982188C19DC18981CA00119EF98B18182CBE3230304F408825CD6460D8DECAC020710B21A602F4037F0B03C3B6F3058945896021165024A5A531307C5ACEC0C01BC9C0207C8181812B1AD30E445CE0F0AB02D8AFEE0CF94098CE90C3900A14F164C8634866D003B28C180C180C19CC004CA540911C77C180000000097048597300000EC300000EC301C76FA86400000726494441546843ED9A096C145518C7FF6F667676B7F4E26A28D0165AEE2A1E5514410EA1A2A262D4483431E205E29968E2114314D188468304904412624C0C46A590A8201020E550C122726929B4624D0F5BDA5228EDCEEC1C7E6F7696D975173A9010B7EBFE9276DFBC999D79FFF77DEFFBBE372D52A4489122458AC481D99F7159765C630B2B35D6AADA1D09CE88748685A34563769E64F7C41223787B938EB9FBB59266C59CA79B98D4A523D3B0CF253A22A9F189689218B60CF4B115474ABD27EC53E788123C668BE2276B7E785235E7192604BBBB47E21110E827634186842595B7FA74BBDB11B5BC5A13EBBBCC554D8A39BFA78BE5040DF81A0378AF2DC85EB3BB2CCE59386F43604E5D00ABA979C175DDD31018B4C23436A16A8677AF75CC7F95EE52E596205EA1665289E590B74A8D8AF9DAC6C690575B826B3BCD31AA8161564F12A218B8F9A3E37A6FDEB604B7A8663E9F09DE4E4628DB641C6E377278DB124C9139E95C391232261A9490C61E1F8D2F9694E06427253851106062085584A5FD0CDCD95FC735993AFCEC5C8578C98422575960167DACE7EDFF9A6CC9C093050C8F0E913032333A539EA17A71438386F78FE938709A4F896BF87EEF2AE35E5F654259785C9681DD93652C1EEB8B11CBC9A01DC1EC7C193B27FBF0FA70DA20B08B906C933082C7671BF8768217A33245BB2704CFA15438449146FBBF378ABDF8F00A815CF4E2442784E001B281CFC7C9E8EB0D0D870BDCD81044E98E2E64AD3F8BB4759D28DED489454714B4510DCCA14D019E1926E3F13CEBD035DD0AE61764088615440A298894641AD63AE3F000904B83BD9E5CB180CE85CB35895C2D9DBE130F31CEB997870B28E815B2AC4662171C5670CF1E1DDB5A047452C5AB3111959D22DEAC02A6962BA83DEB04AF378B65E478DCBFA2E85670AED7C0FE6932D694306C982063758984FDB7C8B88B22E7DBA3811FA7C85879B5841FA678F14171486C9ECFC49EA91EE4FB620732BF0074BDF3D85E247ECE50D93E02D6FCA9E283E326090F4F5F34873A043C52A142E5BE4EE4FA05DC3F28FEB5F1E8DEC274AF7C9AFD03ED26AEDC16C4D5DB75BC7A48C517E3FD189B25A0649B82EBCA0DDCB85DC1CC5C0933734C9CE812B0B7D5C00B45D1B74F170D3C5DE4C167B5CE444CEC0364794203E61A16556A707C253EBB5A19BE27970F73C700D1F55AEE5630A795F6574B6B4C044DEED80C650D0C7F759A587A4C438B1672C5BF14116BEB744CCF11AD472F39AEE3C17C4F94BBDD3D80E174D044798B23684CA63384EA331A6A68B2BAC3A0316C6D760416F562905D1AD995607EEB48E7D4E8A79D161B658928DA68D2336D6B1D3A236067B386670B4317710B3C5F246145B50635C25D7B45649FBF038635A1F1E0D33884964838159D541DC1323D82C70637B8121C9738F78FECE2EDC547353C3ED46345E1697D4DF426339435447F915B3CCCE0B4F86986FB55D90D02AA6FF763F34D12AD7B93628B3331018A61E75BF3FFE6D205BBB8FF7EB272459B86B954393D3F4CC22735419C35A21FF9EB29C7770AD2258CCD880D745CE06DB9A1C0362947C2922B19AD5BE73E951D7CB95D6EC1AE6078BF4AC70B2364DCD047C0EADA58EBED39C52C57E6F0212F1AE389A9A03A6892BEAC55EC23E0B1422FA6E478EC23E0BB063D9EC3C5A55BC14D2AC3FD7B54288633837C9D3DF36B107B69B0917C5567E03D12180917547546C7A77F6A68D3621FA750205C5AE5FC69E38E811E2C230B668A8E04DE7AEEA0815FC85B38FCA93C7B706A3A74ACAD772BD785602E7437A5011E1923A920212DC1E8BEDA2E86DF3AA2FB06534EE66B73D51FB1AE1A66C509E0A7938E98278BBCD83549C2BC021363D37514FA0DF022ECD18A209A296344B2B8328876DDBDA3BABFF21279A240B0FE7C534D93713E3A7486872B341C254F08539C2DE1E36B7DD83BCD8F83A53E1C29F562643AC3FC7D4A546D7DDF20115E97119A735905F32AEAA13C11CBAAF91A3BBF604E0D4DC8E47215DFD405A30479C877FD22A3082FE081C102D6FD2DE0DDDF03E7D6EC8C5C0F168E62AE855C56C11A899CBE2B887DED17161BA6394865E2CF3A66EDEEC2FA3A154D946FB8782EAE83F27E597DC803DE3D4681AADEA9B49E2A92D19F529F1BAC9124D20B80307C6059B449E94FD9C847166EA542A35E7136FD7CD3B2ED661923683B79A45DC7F8724A79B434CE4362BE0088840B3B4551FD58A740551B435D84584E832A60F20E15B37F0A60FA4EF54262A34858C16E68A225F035D5F5FCD32D3D5AF0A590129CECFC3F05E778A3B6BB4987F5D6C61FD268094E97580D75F6907F4EBA78288DB78FCC101A79DB123C3A1D47696FFE1B6F2723B4F1D8BA69A27C9AB72DC1DF4CF06A037CEC1DB27C646E4F0A240625CFCFDEB10F9DA0B570B4B83643C2F264124D5A82591EBC483BADC3769723F8E102C9CC4B632FF5F7E22DF279E7F5420F853657A7C86BE7667BD84ABBCB226E013A6AB332E4A46ACE550D4CECD4916DBFF34E78C87DF9BF1E36FA68CD92D85507A77B5BED532952A4489122458AFF1CE01FDE3B8B1BA4AF49CB0000000049454E44AE426082",
    ["MyQ_garage_closed.png
		["MyQ_garage_offline.png
    ["MyQ_garage_open.png"] = "89504E470D0A1A0A0000000D494844520000003C0000003C0802000000B59E4E25000000206348524D0000870F00008C0F0000FD520000814000007D790000E98B00003CE5000019CC733C857700000103694343504943432050726F66696C65000028CF6360609260000226010686DCBC92A22077278588C82805062490985C5CC0801B3032307CBB062219182EEB32900E3853528B9381F407202E29025A0E343205C8164987B02B40EC2408BB07C42E0A097206B21700D91AE948EC24247679494109907D02A43EB9A008C4BE0364DBE4E6942623DCCDC0939A171A0CA423805886A1982188C19DC18981CA00119EF98B18182CBE3230304F408825CD6460D8DECAC020710B21A602F4037F0B03C3B6F3058945896021165024A5A531307C5ACEC0C01BC9C0207C8181812B1AD30E445CE0F0AB02D8AFEE0CF94098CE90C3900A14F164C8634866D003B28C180C180C19CC004CA540911C77C180000000097048597300000EC300000EC301C76FA86400000634494441546843ED990D4C13571CC0FB716DA10845045ABE56F103118B8008551AA75034F8350DA8DD1C5B66748B9BCBCCA2D19939E7A2C832CD32A62ECE194D74CB0A7E339999D2AAA00805658208288A8814442DDFB4B4BD768FF6C9DAE328EDB55648FACB85DE7BFF7777BF7BF77FEF3E20EBF57AD26883027F47152E6967E19276162E6967E19276168EBC23821D29BA7A72AFDF2EAE7AD8FCB2C3C7D3237A72C8F2B76772D9E3C8B08963708CB44AABBD76BB5A2C9149CBEE4E0D0D4EE1F382FCC6F628D5B2EA47978A2B7893424449FC8509D1DE4C37B8817DD8258DEAF5F71E37E54864E70ACA1004499D1BBB32893F258463DAAFEDBDAABCA2F2EC7C596D4353727CA448C89F356D229D4A85614258290DDAFC6F020A2D6D9DE70B6F9D94CAEAE5ADF3E3A78B84F182C8300632A40AD8E4A1BCF5D495D233574BC17ADABC38B04C0AF2279636B6F574AF5A232DAB026970FD4E0D6F62FF455F2C88F619C384612B50A328C878B1A458525219C60D0267BB581033D6C31D86ADC32A691D8974E7C1936C69496EE12D3706636562DC8AA4F88901FE143BC6577B8F32AFE8DF6C4949D5A3C6F9FCE9EF0AF982E95368D6ED711869B9A2E3F415598EB454FE5C91323B0A744C022F0CB147D61C70ECFAE617D9D2E2D3D25254A74B4B8C5B25E44F0EF427934D0F015A991D115FBA5BA5BE5C5A992D911555D4C68487826E589410CD7277CCD8C745A3D3DFACBC2F969480D9268C1B087A678920669CA7070C9B83956E5674FE28BE08E6DAB19E1EC6E1121AE0EBB08EB582B61EE5DF86B4B957DF249C19B171554A043700C60600D203C85FB6477DB43D7DD7AF372A1FA8B560427B63E8F4FAFB4F9FED387A76B26873696D3DAC7D8599F4F623A7976DCBD2EAC0262302E091F9FB05A08411327BF6A878D8382F269C6A3608DE24C06371425479751D0A2B2066D2A84E8F5046D623141DA1A0289872CD18B14F799626E241D226A9A141751DBD2AE72F2A8DD6C4032757CDA6BC255FFD9412C7FB3C2DD958FCEED8B9DFF2AE1BD79D898037217BE767C6F5DAC666E1868CC7B9071063D980A5F450742B7BFB34CE5FDABA95D000824D95119BD30300636C868C7C691C5CD2AF05901BD89C361D94046130E889B1D3C607FA07F8B2383E2C260D61D0A81432B94F8B829786D6B6AE1645D79396D682F29AB68E2EB88D0DBC869CE606B1AF1DFC3A73FD8AF405B385332278E38343833881FEBE1C3F5F6E007B2A37686E74B82829EEDB35CB8B0F7F93103D156E661FF6F6F4AE75A9540A89BF76A75AA3815578D0E93449D6D6AC2FDE9BF36986AAAF0FD612C5AE9E4E888958181B7EE8AF42CBC600B55A73E842E1043FD6FB8BE6C02A3B2022EDEEC610C4F2D6BC9398B96E59BBB22FE752110C58E48CA4B851D1B9292D697D6A72D2AC281F6F160CD80E91F410CD9FB5EF9354303AC0F2ACB367EE8C08EDA007B1C120548A1645DFF2F1DAB36629687D34BF6C4BD60918B3114BD2D841FB8AF305B7552869DFDAA54C3A8DEDE5717CCB07D83969088C3B04C67B7224D9F9370DA561C1B1B09C1EF83260E68A9FC205C6B06CD8B1358B1170C845F1D39A9A9FC3F230E03858961E38901908424D9E110E0B8488E4B283397EB0603B4406228346F3F36282AB6C655660001B8237BA60FF71B06C3B44A4C13B244221EF165F5A95716CFB898B7F1694D7B576C0D810C8DBBB7365D51939F9ABBF3FFEE10FFDE38F41237E8B20220D0079932E8C678D614A4AAB36EF17CFDBB0A7BCA105C606F1B2B72F71E3DE8F338F9CBD7A8B4CA17CB952889F76F880B6D82B4A501A30C1CFFBC84651D1CF9B1F8833A507B6057A7BC2C020DC11CAA9DD1BEA4EEE95FDB2F58F2DE9B1A18130602DD873242E6D04EC8F49A584B1BDD92CFC4F580030CF4486F87B127CD1B779F6B00A30B050C35FDC71092A8D0D30DF2EEC81E06830F5DB71224F5A56E34EA7B931680CA4FF521ABE79825766600B5EE9F52AB556A9D64C0AE61CDDB47AA09370CF7008B06DB1D27A6CFEE0A0526B0EE6DD60B9D3C1BA4E4FBA78B3B2BEB1D918B24063CB8BC3FF14BBD3FAFF5BA04675350D4DC6FAE1C011C27E42E8EDD3467039C6A2ACFA719DDCCAFB9623F1F51AB3200E3E7977F4A8A425771A72F79BF6AE99F4E5B2BB15754F61C170550CA7F9EAD7B90C1C95E3E3B57A4182A901F6FBF4A8C001B387F371493B0B97B4B370493B0B97B4732091FE031F2C57844B95DC0B0000000049454E44AE426082",
		["MyQ_garage_opening.png"] = "89504E470D0A1A0A0000000D494844520000003C0000003C0802000000B59E4E25000000206348524D0000870F00008C0F0000FD520000814000007D790000E98B00003CE5000019CC733C857700000103694343504943432050726F66696C65000028CF6360609260000226010686DCBC92A22077278588C82805062490985C5CC0801B3032307CBB062219182EEB32900E3853528B9381F407202E29025A0E343205C8164987B02B40EC2408BB07C42E0A097206B21700D91AE948EC24247679494109907D02A43EB9A008C4BE0364DBE4E6942623DCCDC0939A171A0CA423805886A1982188C19DC18981CA00119EF98B18182CBE3230304F408825CD6460D8DECAC020710B21A602F4037F0B03C3B6F3058945896021165024A5A531307C5ACEC0C01BC9C0207C8181812B1AD30E445CE0F0AB02D8AFEE0CF94098CE90C3900A14F164C8634866D003B28C180C180C19CC004CA540911C77C180000000097048597300000EC300000EC301C76FA86400000634494441546843ED990D4C13571CC0FB716DA10845045ABE56F103118B8008551AA75034F8350DA8DD1C5B66748B9BCBCCA2D19939E7A2C832CD32A62ECE194D74CB0A7E339999D2AAA00805658208288A8814442DDFB4B4BD768FF6C9DAE328EDB55648FACB85DE7BFF7777BF7BF77FEF3E20EBF57AD26883027F47152E6967E19276162E6967E19276168EBC23821D29BA7A72AFDF2EAE7AD8FCB2C3C7D3237A72C8F2B76772D9E3C8B08963708CB44AABBD76BB5A2C9149CBEE4E0D0D4EE1F382FCC6F628D5B2EA47978A2B7893424449FC8509D1DE4C37B8817DD8258DEAF5F71E37E54864E70ACA1004499D1BBB32893F258463DAAFEDBDAABCA2F2EC7C596D4353727CA448C89F356D229D4A85614258290DDAFC6F020A2D6D9DE70B6F9D94CAEAE5ADF3E3A78B84F182C8300632A40AD8E4A1BCF5D495D233574BC17ADABC38B04C0AF2279636B6F574AF5A232DAB026970FD4E0D6F62FF455F2C88F619C384612B50A328C878B1A458525219C60D0267BB581033D6C31D86ADC32A691D8974E7C1936C69496EE12D3706636562DC8AA4F88901FE143BC6577B8F32AFE8DF6C4949D5A3C6F9FCE9EF0AF982E95368D6ED711869B9A2E3F415598EB454FE5C91323B0A744C022F0CB147D61C70ECFAE617D9D2E2D3D25254A74B4B8C5B25E44F0EF427934D0F015A991D115FBA5BA5BE5C5A992D911555D4C68487826E589410CD7277CCD8C745A3D3DFACBC2F969480D9268C1B087A678920669CA7070C9B83956E5674FE28BE08E6DAB19E1EC6E1121AE0EBB08EB582B61EE5DF86B4B957DF249C19B171554A043700C60600D203C85FB6477DB43D7DD7AF372A1FA8B560427B63E8F4FAFB4F9FED387A76B26873696D3DAC7D8599F4F623A7976DCBD2EAC0262302E091F9FB05A08411327BF6A878D8382F269C6A3608DE24C06371425479751D0A2B2066D2A84E8F5046D623141DA1A0289872CD18B14F799626E241D226A9A141751DBD2AE72F2A8DD6C4032757CDA6BC255FFD9412C7FB3C2DD958FCEED8B9DFF2AE1BD79D898037217BE767C6F5DAC666E1868CC7B9071063D980A5F450742B7BFB34CE5FDABA95D000824D95119BD30300636C868C7C691C5CD2AF05901BD89C361D94046130E889B1D3C607FA07F8B2383E2C260D61D0A81432B94F8B829786D6B6AE1645D79396D682F29AB68E2EB88D0DBC869CE606B1AF1DFC3A73FD8AF405B385332278E38343833881FEBE1C3F5F6E007B2A37686E74B82829EEDB35CB8B0F7F93103D156E661FF6F6F4AE75A9540A89BF76A75AA3815578D0E93449D6D6AC2FDE9BF36986AAAF0FD612C5AE9E4E888958181B7EE8AF42CBC600B55A73E842E1043FD6FB8BE6C02A3B2022EDEEC610C4F2D6BC9398B96E59BBB22FE752110C58E48CA4B851D1B9292D697D6A72D2AC281F6F160CD80E91F410CD9FB5EF9354303AC0F2ACB367EE8C08EDA007B1C120548A1645DFF2F1DAB36629687D34BF6C4BD60918B3114BD2D841FB8AF305B7552869DFDAA54C3A8DEDE5717CCB07D83969088C3B04C67B7224D9F9370DA561C1B1B09C1EF83260E68A9FC205C6B06CD8B1358B1170C845F1D39A9A9FC3F230E03858961E38901908424D9E110E0B8488E4B283397EB0603B4406228346F3F36282AB6C655660001B8237BA60FF71B06C3B44A4C13B244221EF165F5A95716CFB898B7F1694D7B576C0D810C8DBBB7365D51939F9ABBF3FFEE10FFDE38F41237E8B20220D0079932E8C678D614A4AAB36EF17CFDBB0A7BCA105C606F1B2B72F71E3DE8F338F9CBD7A8B4CA17CB952889F76F880B6D82B4A501A30C1CFFBC84651D1CF9B1F8833A507B6057A7BC2C020DC11CAA9DD1BEA4EEE95FDB2F58F2DE9B1A18130602DD873242E6D04EC8F49A584B1BDD92CFC4F580030CF4486F87B127CD1B779F6B00A30B050C35FDC71092A8D0D30DF2EEC81E06830F5DB71224F5A56E34EA7B931680CA4FF521ABE79825766600B5EE9F52AB556A9D64C0AE61CDDB47AA09370CF7008B06DB1D27A6CFEE0A0526B0EE6DD60B9D3C1BA4E4FBA78B3B2BEB1D918B24063CB8BC3FF14BBD3FAFF5BA04675350D4DC6FAE1C011C27E42E8EDD3467039C6A2ACFA719DDCCAFB9623F1F51AB3200E3E7977F4A8A425771A72F79BF6AE99F4E5B2BB15754F61C170550CA7F9EAD7B90C1C95E3E3B57A4182A901F6FBF4A8C001B387F371493B0B97B4B370493B0B97B4732091FE031F2C57844B95DC0B0000000049454E44AE426082",
		["MyQ_garage_closing.png"] = "89504E470D0A1A0A0000000D494844520000003C0000003C08030000000D222940000000206348524D0000870F00008C0F0000FD520000814000007D790000E98B00003CE5000019CC733C857700000103694343504943432050726F66696C65000028CF6360609260000226010686DCBC92A22077278588C82805062490985C5CC0801B3032307CBB062219182EEB32900E3853528B9381F407202E29025A0E343205C8164987B02B40EC2408BB07C42E0A097206B21700D91AE948EC24247679494109907D02A43EB9A008C4BE0364DBE4E6942623DCCDC0939A171A0CA423805886A1982188C19DC18981CA00119EF98B18182CBE3230304F408825CD6460D8DECAC020710B21A602F4037F0B03C3B6F3058945896021165024A5A531307C5ACEC0C01BC9C0207C8181812B1AD30E445CE0F0AB02D8AFEE0CF94098CE90C3900A14F164C8634866D003B28C180C180C19CC004CA540911C77C180000002A3504C5445FFFFFFFEFFFFECF2F49EB6C2668B9F4D78905F859B8FAAB8DFE8ECF7FBFBB8C9D260869C1E527047738CAABFC99FB6C3698DA12355734F7990A6BBC7EFF5F7FCFEFED2DEE37C9BAD2C5D7930617D82A0B0D7E2E7A4BBC64D77902658756A8EA2C1D1D9F9FCFCFFFFFEE6EEF197B1BE426F88215572668BA0BDCED6F8FBFCDBE5E987A4B435647F34647FDAE4E9F5F9FAB3C5CF5B82991F53714B768EA2B8C5EDF3F5698EA12657744C768FA3B9C5EEF4F6FDFFFFCEDAE17798AA295B7731627E86A3B3DAE5E9FDFEFFEFF4F6A4BAC64D778F225572678CA0BFCFD7FAFDFEE5EDF092ACBA3C6A85225573C1D1D8FBFDFEDDE6EB86A4B333627E30607C83A1B1D9E4E8FEFEFEF3F7F9AEC2CC577F961D516F4E7990A6BCC7F0F6F7C1D0D849748DA0B7C3E6EDF17495A82659763766818AA6B6235674668A9ED5E0E6E6EDF02F607C5C8399C5D3DBFAFCFD7E9EAF255774CBD9DF7C9CAD4F79918FAAB91E506DFBFFFF4B778F93ACBBD8E2E51B4D6B93ADBBB8CAD4A8BECAF7FAFBD8E2E6809EAF42708A88A5B689A5B5648AA0557E946E92A66F92A3B5C8D244728B1B4D6AB5C8D1265B7A47738D366783114C6E6D91A6AFC3CEB3C6D0B5C7D2B6C8D2BACBD5517C95114B6D9CB4C26A8FA4124B6C9AB3C196B0BF7194A86F92A693AEBD7396AA45738C6F92A5134E6F144E7092ADBD7B9CAE1952731A53731B53741851725D859CD9E2E8E2E9EDE8EEF1F4F7F8FAFBFCF6F8F948758F376885C8D6DEFCFCFDA1B8C61F567616507182A1B3F7F9FAE9EEF15C849C3D6D89D3DEE4B8C9D3285D7C1750718EAABAF9FAFBF2F5F77295A9124D6F47748ED8E2E7CAD7DF3668841C547498B1C0FBFCFCF8FAFB89A6B7507B94E0E7ECDAE3E892ADBB1F57777698AB1E557541708B6B8FA3356683255A7A5C849B1A4D6CBACBD38CA7B78BA7B78CA7B6A4B9C558822F63000000097048597300000EC300000EC301C76FA8640000026649444154484B631805A36080002313330B2B1B3B0723944F02E0E4E2E6E165E7E31710141216818A110744C5C42524A5A4C1768AC8C8CAC92B2882C5F1022510C1A8ACA2AAA6AEA109160101462D6D1D5D6D3D229CAF6F6068646C620AE5C180A28299B985A51594871D58DBD8DAD93B383A41B928C0D9C5D5CDDDC313CAC3005EDE3EBEF27EFE501E26600C080C0A0E090D03B1C11E8483F088C8A8E89858280F17F08C13108C4F6082F2A020312939253580A818B572714D4BCF80724020332B3B2717CA260C18F5F2F20BA06C20282C1285B288038CDA45085746174319C402B19252288B81A1AC1CCA2016545492AB19184D289AAB80446E750D51A016A8B60EDDE6FA86C62682A0B1A9B905A81643736B1B844300B4770089BA4E0A34630418919ABB7068662406E0B0B9BB8718D08BDDCF7DC8A07F02104C9C3469D2E42953A642C5C0601A769BA1B210301D22030633A06260309308CDB3203260D00F1503036234CF86C880C11CA818180C9C66EC0136172A0B01F3203260301F2A06010B802218697B215472D1A2458B172F5E02910183A5CB962F5FBE6225541EA419A7CDAB56AF59BB76ED3A880C18ACDFB07EFDFAD51BA1F27835F76DDA0C2E9A51C096ADDBA0B20434F76DDFB113220E07BB7643A5808080E6BEBE3D7B912D0FDBB71F2A0E02E000434FDB28A17DE0E0218814101C3E72142A0A0660CDF86C068263C7A1969F380915810282CE068153A7CF0045CF9EDB0EE5C300519AFBFACE5F08BB088B2004006B46F6F3252081A9B9EFF295AB501612C008B06BD7AF5FBF019524046E02D5DEBA8DD07CE72E10DCBB7B1F441101EEDDBDFB808C06D6281805A401060600DF672B0ECE90EB850000000049454E44AE426082",
		["MyQ_garage_stopped.png"] = "89504E470D0A1A0A0000000D494844520000003C0000003C08030000000D222940000000206348524D0000870F00008C0F0000FD520000814000007D790000E98B00003CE5000019CC733C857700000103694343504943432050726F66696C65000028CF6360609260000226010686DCBC92A22077278588C82805062490985C5CC0801B3032307CBB062219182EEB32900E3853528B9381F407202E29025A0E343205C8164987B02B40EC2408BB07C42E0A097206B21700D91AE948EC24247679494109907D02A43EB9A008C4BE0364DBE4E6942623DCCDC0939A171A0CA423805886A1982188C19DC18981CA00119EF98B18182CBE3230304F408825CD6460D8DECAC020710B21A602F4037F0B03C3B6F3058945896021165024A5A531307C5ACEC0C01BC9C0207C8181812B1AD30E445CE0F0AB02D8AFEE0CF94098CE90C3900A14F164C8634866D003B28C180C180C19CC004CA540911C77C18000000207504C5445FFFFFFFEFFFFECF2F49EB6C2668B9F4D78905F859B8FAAB8DFE8ECF7FBFBB8C9D260869C1E527047738CAABFC99FB6C3698DA12355734F7990A6BBC7EFF5F7FCFEFED2DEE37C9BAD2C5D7930617D82A0B0D7E2E7A4BBC64D77902658756A8EA2C1D1D9F9FCFCFFFFFEE6EEF197B1BE426F88215572668BA0BDCED6F8FBFCDBE5E987A4B435647F34647FDAE4E9F5F9FAB3C5CF5B82991F53714B768EA2B8C5EDF3F5698EA12657744C768FA3B9C5EEF4F6FDFFFFCEDAE17798AA295B7731627E86A3B3DAE5E9FDFEFFEFF4F6A4BAC64D778F225572678CA0BFCFD7FAFDFEE5EDF092ACBA3C6A85225573C1D1D8FBFDFEDDE6EB86A4B333627E30607C83A1B1D9E4E8FEFEFEF3F7F9AEC2CC577F961D516F4E7990A6BCC7F0F6F7C1D0D849748DA0B7C3E6EDF17495A82659763766818AA6B6235674668A9ED5E0E6E6EDF02F607C5C8399C5D3DBFAFCFD7E9EAF255774CBD9DF7C9CAD4F79918FAAB91E506DFBFFFF4B778F93ACBBD8E2E51B4D6B93ADBBF0F5F7F7FAFBD8E2E6809EAF1B5373567F956E92A6114C6E45738C1B4D6A2259787D9DAF46748ED5DFE53E6E89CDD9E0376885C6D4DC306381BFCFD8295E7CB8C9D3B0C4CF1B5374A9BECA134E6FA2B9C69BB3C26F92A694AEBE6F92A58DA9B986A4B57F9EB1C7D4DC7899AD326582E6ECF092ADBB41708B6B8FA3356683255A7A5C849B1A4D6CBACBD38CA7B78BA7B78CA7B6A4B9C598027B9E000000097048597300000EC300000EC301C76FA864000001F349444154484BEDD6F95F0C711807F0679222A4E840E870444B5222458E0EE5ACC8518AEE508E9CA1245A92A384D0A16CAA2D7F64DF99D787676B46FBCCFEE2977DFF30FB7966E6F3FACEF5C3929FDF7FA2052C0A5C1C14BC44C36CC3D29065CB570487AE0C0B5FB53A02FB6422A3A2D7AC5D1763AC19B17EC3C6D8B87863FF8212F48DB669F396AD89DBB61B7B745A9263C74E47B2E0F277A5EC4E4DDB938EE98FF8B8BDFB32F66762B29675E060F6A1C3478E629C2327372FFF5841212693E3274E9E8A3D7D06939956545C72F65CE9793D1B37F8D7858B97CACA2F5760FA97C2CAB0F02B5703304155754D6D5D91E88D66E6E6D5373462D05DBB7EA3A919D93B2DF9E6ADDBC8CA9D96482419CDD1C257597E17412AEADE7D24A2070F11A41EB5FA5A56AF694EF9B1DA343F9179AACE6D9BBF72FB33990E75AEA9FCBC53E6853AB7EDA5F77297D3E944647AD9F4C02CCAAF885E233269B99BE80D2293967B88DE2232E93DBF237A8FC8A42B7F20EA4564D27217511F2293963F12F5233269F913D16744262D77127D416296E5011CF444F41589E965D3B7FD0D073D117D476236561E446236CA43484C5C1E1E1E4162E2B215E381CDFFB66D95052BFF181D157E615665F1E769ABEC79CF636AE3F303FBE972B9C671D09B5FEADC89492E4FB99569F78CFE2330ED76FFF6E10F969F9F3D44B392A97F5DDCB84B640000000049454E44AE426082",
		["MyQ_garage_faulted.png"] = "89504E470D0A1A0A0000000D494844520000003C0000003C08030000000D222940000000206348524D0000870F00008C0F0000FD520000814000007D790000E98B00003CE5000019CC733C857700000103694343504943432050726F66696C65000028CF6360609260000226010686DCBC92A22077278588C82805062490985C5CC0801B3032307CBB062219182EEB32900E3853528B9381F407202E29025A0E343205C8164987B02B40EC2408BB07C42E0A097206B21700D91AE948EC24247679494109907D02A43EB9A008C4BE0364DBE4E6942623DCCDC0939A171A0CA423805886A1982188C19DC18981CA00119EF98B18182CBE3230304F408825CD6460D8DECAC020710B21A602F4037F0B03C3B6F3058945896021165024A5A531307C5ACEC0C01BC9C0207C8181812B1AD30E445CE0F0AB02D8AFEE0CF94098CE90C3900A14F164C8634866D003B28C180C180C19CC004CA540911C77C18000000207504C5445FFFFFFFEFFFFECF2F49EB6C2668B9F4D78905F859B8FAAB8DFE8ECF7FBFBB8C9D260869C1E527047738CAABFC99FB6C3698DA12355734F7990A6BBC7EFF5F7FCFEFED2DEE37C9BAD2C5D7930617D82A0B0D7E2E7A4BBC64D77902658756A8EA2C1D1D9F9FCFCFFFFFEE6EEF197B1BE426F88215572668BA0BDCED6F8FBFCDBE5E987A4B435647F34647FDAE4E9F5F9FAB3C5CF5B82991F53714B768EA2B8C5EDF3F5698EA12657744C768FA3B9C5EEF4F6FDFFFFCEDAE17798AA295B7731627E86A3B3DAE5E9FDFEFFEFF4F6A4BAC64D778F225572678CA0BFCFD7FAFDFEE5EDF092ACBA3C6A85225573C1D1D8FBFDFEDDE6EB86A4B333627E30607C83A1B1D9E4E8FEFEFEF3F7F9AEC2CC577F961D516F4E7990A6BCC7F0F6F7C1D0D849748DA0B7C3E6EDF17495A82659763766818AA6B6235674668A9ED5E0E6E6EDF02F607C5C8399C5D3DBFAFCFD7E9EAF255774CBD9DF7C9CAD4F79918FAAB91E506DFBFFFF4B778F93ACBBD8E2E51B4D6B93ADBBF0F5F7F7FAFBD8E2E6809EAF1B5373567F956E92A6114C6E45738C1B4D6A2259787D9DAF46748ED5DFE53E6E89CDD9E0376885C6D4DC306381BFCFD8295E7CB8C9D3B0C4CF1B5374A9BECA134E6FA2B9C69BB3C26F92A694AEBE6F92A58DA9B986A4B57F9EB1C7D4DC7899AD326582E6ECF092ADBB41708B6B8FA3356683255A7A5C849B1A4D6CBACBD38CA7B78BA7B78CA7B6A4B9C598027B9E000000097048597300000EC300000EC301C76FA864000001F349444154484BEDD6F95F0C711807F0679222A4E840E870444B5222458E0EE5ACC8518AEE508E9CA1245A92A384D0A16CAA2D7F64DF99D787676B46FBCCFEE2977DFF30FB7966E6F3FACEF5C3929FDF7FA2052C0A5C1C14BC44C36CC3D29065CB570487AE0C0B5FB53A02FB6422A3A2D7AC5D1763AC19B17EC3C6D8B87863FF8212F48DB669F396AD89DBB61B7B745A9263C74E47B2E0F277A5EC4E4DDB938EE98FF8B8BDFB32F66762B29675E060F6A1C3478E629C2327372FFF5841212693E3274E9E8A3D7D06939956545C72F65CE9793D1B37F8D7858B97CACA2F5760FA97C2CAB0F02B5703304155754D6D5D91E88D66E6E6D5373462D05DBB7EA3A919D93B2DF9E6ADDBC8CA9D96482419CDD1C257597E17412AEADE7D24A2070F11A41EB5FA5A56AF694EF9B1DA343F9179AACE6D9BBF72FB33990E75AEA9FCBC53E6853AB7EDA5F77297D3E944647AD9F4C02CCAAF885E233269B99BE80D2293967B88DE2232E93DBF237A8FC8A42B7F20EA4564D27217511F2293963F12F5233269F913D16744262D77127D416296E5011CF444F41589E965D3B7FD0D073D117D476236561E446236CA43484C5C1E1E1E4162E2B215E381CDFFB66D95052BFF181D157E615665F1E769ABEC79CF636AE3F303FBE972B9C671D09B5FEADC89492E4FB99569F78CFE2330ED76FFF6E10F969F9F3D44B392A97F5DDCB84B640000000049454E44AE426082"
	},
	file_exists = function(self,filename)
			local file = io.open(filename)
			if (file) then
				io.close(file)
				return true
			else
				return false
			end
		end,
	decode_hex_string = function(self,hexStr)
    local logPrefix = "("..PLUGIN_CONFIG.NAME.."::DEVICE_ICONS::decode_hex_string): "
		if (not hexStr) then
			log(logPrefix.."No hex data supplied.",LOGLEVELS.WARN)
			return nil
		end
		if (math.floor(#hexStr/2) ~= (#hexStr/2)) then
			log(logPrefix.."Invalid hex data supplied.",LOGLEVELS.WARN)
			return nil
		end
		debug(logPrefix.."input size ["..(#hexStr or "NIL").."].")
	  local i = 1
	  local hexStr_len = hexStr:len()
	  local VALUE = ""
	  while i <= hexStr_len do
	     local c = hexStr:sub(i,i+1)
	     VALUE = VALUE .. string.char(tonumber(c,16))
	     i = i + 2
	  end
		debug(logPrefix.."output size ["..(#VALUE or "NIL").."].")
	  return VALUE
	end,
	create_png = function(self,data,filename)
			-- data = hex encoded png file contents
      local logPrefix = "("..PLUGIN_CONFIG.NAME.."::DEVICE_ICONS::create_png): "
			if (self:file_exists(filename)) then return false end
			local png_data = self:decode_hex_string(data)
			if (png_data and (#png_data == (#data/2))) then
				debug(logPrefix.."writing PNG Data for file ["..(filename or "NIL").."]")
				local file = io.open(filename,"wb")
				if (file) then
					file:write(png_data)
					file:close()
					return true
				else
					return false
				end
			else
				log(logPrefix.."PNG Data DECODE ERROR",LOGLEVELS.WARN)
				return false
			end
	end,
    
  createIcons = function(self)
    local fPath = "/www/cmh/skins/default/img/devices/device_states/"
    
    for fName, fData in pairs(self.DATA) do
      if (not self:file_exists(fPath..fName)) then
        self:create_png(fData,fPath..fName)
      end
    end
  end
}

function task(text, mode)
  debug("("..PLUGIN_CONFIG.NAME.."::task): task [" .. text.."]")
  if (mode == TASK_ERROR_PERM) then
    taskHandle = luup.task(text, TASK_ERROR, MSG_CLASS, taskHandle)
  else
    taskHandle = luup.task(text, mode, MSG_CLASS, taskHandle)
    -- Clear the previous error, since they're all transient
    if (mode ~= TASK_SUCCESS) then
        luup.call_delay("clearTask", PLUGIN_CONFIG.CLEAR_TASK_AFTER, "")
    end
  end
end

local function clearTask()
  task("Clearing...", TASK_SUCCESS)
end

do 
  local BASE_URL = "https://partner-identity.myq-cloud.com"
  MYQ_API = {

    API_CONFIG = {
      NAME            = "MyQApi",
      CLIENTID        = "IOS_CGI_MYQ",
      REDIRECT_URL    = "com.myqops://ios",
      CLIENT_SECRET   = "VUQ0RFhuS3lQV3EyNUJTdw==",
      AUTHORIZE_URL   = BASE_URL.."/connect/authorize?response_type=code&state=&client_id=%s&scope=MyQ_Residential%%20offline_access&redirect_uri=%s&code_challenge=%s&code_challenge_method=S256",
      TOKEN_URL       = "https://partner-identity.myq-cloud.com/connect/token",
      ACCOUNT_URL     = "https://accounts.myq-cloud.com/api/v6.0/accounts",
      DEVICES_URL     = "https://devices.myq-cloud.com/api/v5.2/Accounts/%s/Devices",
      GDO_ACTION_URL  = "https://account-devices-gdo.myq-cloud.com/api/v5.2/Accounts/%s/door_openers/%s/%s",
      LAMP_ACTION_URL = "https://account-devices-lamp.myq-cloud.com/api/v5.2/Accounts/%s/lamps/%s/%s"
    },
    
    login = function(self, userName, password)
      local logPrefix = "("..self.API_CONFIG.NAME.."::login): "
      local codeVerifier = UTIL:generateCodeVerifier(128)
      
      --Apparently SHA256 is hard in Lua so we'll have to call out to the terminal.
      local osCmd = "printf "..codeVerifier.." | openssl dgst -binary -sha256 | openssl base64 | tr '+/' '-_' | tr -d '=' | tr -d '\n' ' '"
      local codeChallenge = UTIL:trim(UTIL:shellExecute(osCmd), " ")
      
      --If the shell command fails, we're probably testing/debugging locally on Windows so use a pure Lua SHA module.
      --This likely never runs on Vera.
      if (codeChallenge == "") then
        local sha = require "sha2"
        debug("Using Lua to generate challenge.")
        codeChallenge = UTIL:base64urlencode(UTIL:base64encode(sha.hex2bin(sha.sha256(codeVerifier))))
      end
      
      local challengeUrl = string.format(self.API_CONFIG.AUTHORIZE_URL, self.API_CONFIG.CLIENTID, self.API_CONFIG.REDIRECT_URL, codeChallenge)
      local response, status, header, contentStr
      
      debug(logPrefix.."Code verifier: "..codeVerifier)
      debug(logPrefix.."Beginning login with PKCE challenge: "..codeChallenge)
      
      --We'll need to carry along all of the cookies we get as we trickle through the OAuth flow.
      local accumulatedCookies = ""
      
      --Follow redirects to get login URL.
      while (status == nil or status == 302) do   
        response, status, header, contentStr = UTIL:request(challengeUrl, "GET", string.len(accumulatedCookies) > 0 and {["Cookie"] = accumulatedCookies} or nil, nil)
      
        accumulatedCookies = UTIL:parseCookies(header["set-cookie"] or "")
        
        if (status == 302) then
          local redirectTo = header["location"]
          
          if (string.find(redirectTo, "?error") ~= nil) then
            local msg = "Bad login url."
            log(logPrefix..msg, LOGLEVELS.ERROR)
            return false, msg
          end
          
          challengeUrl = UTIL:startsWith(redirectTo, "/") and BASE_URL..redirectTo or redirectTo
        end
      end
      
      if (response ~= 1 or status ~= 200) then
        return false, "Could not find login page."
      end
      
      debug(logPrefix.."Login page found, submitting credentials.")
      
      --Hack up the HTML and find the form action, verification token and return url.
      local action = BASE_URL..UTIL:cutString(contentStr,"<form action=\"","\"") 
            
      local loginParams = {
        ["ReturnUrl"] = UTIL:cutString(action, "returnUrl=", nil),
        ["Email"] = userName,
        ["Password"] = password,
        ["__RequestVerificationToken"] = UTIL:cutString(contentStr, "__RequestVerificationToken\" type=\"hidden\" value=\"", "\"") 
      }
      
      local loginBody = UTIL:buildKeyValueString(loginParams)
      
      local HEADERS = {
          ["Content-Type"] = "application/x-www-form-urlencoded",
          ["Cookie"] = accumulatedCookies,
          ["Content-Length"] = #loginBody
        }
            
      response, status, header, contentStr = UTIL:request(challengeUrl, "POST", HEADERS, loginBody)
          
      accumulatedCookies = UTIL:parseCookies(header["set-cookie"])
      
      if (response ~= 1 or status ~= 302) then
        log(logPrefix.."Login failed.  Response status is: "..status, LOGLEVELS.ERROR)
        return false, "Login failed"
      end
      
      debug(logPrefix.."Login successful, following callback url.")
      local loginRedirect = BASE_URL..header["location"]
        
      HEADERS = {
        ["Cookie"] = accumulatedCookies
      }
        
        --Follow the redirect to the callback url.
      response, status, header, contentStr = UTIL:request(loginRedirect, "GET", HEADERS, nil)
        
      if (response ~= 1 or status ~= 302) then
        log(logPrefix.."Failure navigating to callback url.", LOGLEVELS.ERROR)
        return false, "Could not execute login callback."
      end
        
      loginRedirect = header["location"]
      local code = UTIL:cutString(loginRedirect,"code=","&")
      local scope = UTIL:urldecode(UTIL:cutString(loginRedirect,"scope=","&"))
         
      debug(logPrefix.."Got login code, beginning token retrieval.  Last step....whew!")
      
      local qry = {
        ["client_id"] = self.API_CONFIG.CLIENTID,
        ["client_secret"] = UTIL:base64encode(self.API_CONFIG.CLIENT_SECRET),
        ["code"] = code,
        ["code_verifier"] = codeVerifier,
        ["grant_type"] = "authorization_code",
        ["redirect_uri"] = UTIL:split(loginRedirect,"?")[1],
        ["scope"] = scope
      }
          
      local tokenPayload = UTIL:buildKeyValueString(qry)
      
      HEADERS = {
        ["Content-Type"] = "application/x-www-form-urlencoded",
        ["Content-Length"] = #tokenPayload
      }
    
      response, status, header, contentStr = UTIL:request(self.API_CONFIG.TOKEN_URL, "POST", HEADERS, tokenPayload)
      
      if (response ~= 1 or status ~= 200) then
        local msg = "Failed to retrieve access token."
        log(logPrefix, msg, LOGLEVELS.ERROR)
        return false, msg
      end
      
      local token = json.decode(contentStr).access_token
      debug(logPrefix.."Successfully cut access token.")
      
      HEADERS = {
        ["Authorization"] = "Bearer "..token
      }
      
      response, status, header, contentStr = UTIL:request(self.API_CONFIG.ACCOUNT_URL, "GET", HEADERS)
      
      if (response ~= 1 or status ~= 200) then
        local msg = "Failed getting account info"
        log(logPrefix..msg, LOGLEVELS.ERROR)
        return false, msg
      end
      
      --Let's not make it difficult just yet.  Assume only 1 account.
      local accountId = json.decode(contentStr).accounts[1].id
      
      debug(logPrefix.."Found account id "..accountId)
        
      return true, token, accountId
      
    end,
    
    changeDeviceStatus = function(self, token, accountId, serialNumber, deviceId, gatewayDeviceId, deviceFamily, action)
      local logPrefix = "("..self.API_CONFIG.NAME.."::changeDeviceStatus): "
      debug(logPrefix.."Requesting action "..action.." on device "..(serialNumber or "NIL").." of type "..deviceFamily)
      
      local resultText -- Summary of the result

      local response, status, header, contentStr
      
      if (action ~= "0" and action ~= "1") then
        log(logPrefix.."Unknown device state requested: "..action.." for device "..serialNumber.."... Aborting state change.", LOGLEVELS.WARN)
        return
      end
      
      local HEADERS = {
        ["Authorization"] = "Bearer "..token,
        ["Content-Length"] = 0
      }
      
      local actionText, messageText, url
            
      if (deviceFamily == "lamp") then
        actionText = action == "1" and "on" or "off"
        messageText = "Turning "..actionText
        url = self.API_CONFIG.LAMP_ACTION_URL
      elseif (deviceFamily == "garagedoor") then
        actionText = action == "1" and "open" or "close"
        messageText = action == "1" and "Opening" or "Closing"
        url = self.API_CONFIG.GDO_ACTION_URL
      else
        return false, "Unknown device family."
      end
      
      url = string.format(url, accountId, serialNumber, actionText)
      log(logPrefix..url, LOGLEVELS.ERROR)
      response, status, header, contentStr = UTIL:request(url, "PUT", HEADERS) 
        
      local result = response == 1
      
      if (result == true) then
          result = status == 202
          if (result == true) then
              resultText = "Successfully changed status to " .. action
              local refreshAfterChangeInterval = (luup.variable_get(MYQGATEWAY_SID, PLUGIN_VARS.REFRESH_AFTER_CHANGE_INTERVAL, gatewayDeviceId) or PLUGIN_CONFIG.REFRESH_AFTER_CHANGE)
              debug(logPrefix.."State change command issued.  Will refresh status in "..refreshAfterChangeInterval.." seconds.")
              luup.call_delay('refreshDevices', refreshAfterChangeInterval, "")
              luup.device_message(deviceId, 4, messageText, PLUGIN_CONFIG.REFRESH_AFTER_CHANGE_INTERVAL, PLUGIN_CONFIG.NAME)
          else
              resultText = "State change error.  Response status from myQ is: "..status
              log(logPrefix..resultText,LOGLEVELS.ERROR)
              luup.device_message(deviceId, 2, "Failed "..messageText, PLUGIN_CONFIG.REFRESH_AFTER_CHANGE_INTERVAL, PLUGIN_CONFIG.NAME)
          end
      else
          resultText = "Unsuccessful at communicating with the myQ service"
          log(logPrefix..resultText,LOGLEVELS.ERROR)
      end
      
      
      return result, resultText
    end,
    
    inspectDevices = function(self, securityToken, accountId, gatewayDeviceId)
      local logPrefix = "("..self.API_CONFIG.NAME.."::inspectDevices): "

      -- Statuses for doors
      local doorStatuses = {
        ["closed"] = "0",
        ["open"] = "1",
        ["stopped"] = "3",
        ["opening"] = "4",
        ["closing"] = "5",
        ["faulted"] = "7", -- faulted
        ["autoreverse"] = "7", -- faulted
        ["unknown"] = "10" -- offline
      }

      local connectionResult -- True if successful, false if not
      local connectionText -- Holds issue with connection
      local openerInfo = {} -- Table to hold info about openers
      local ParentName = nil
      local ParentId = nil
      local numGDO = 0
      local numLights= 0
      local response, status, header, contentStr
             
      local HEADERS = {
        ["Authorization"] = "Bearer "..securityToken
      }
      response, status, header, contentStr = UTIL:request(string.format(self.API_CONFIG.DEVICES_URL, accountId), "GET", HEADERS)
        
      -- Check out our response
      if (response == 1 and status == 200) then
        --json parser is dumb and can't handle empty arrays.
        local responseStr = contentStr:gsub('%[%]',"null")
        local deviceContent = json.decode(responseStr)

       
        debug(logPrefix.."Parsing devices.")
        connectionResult = true
        local numOpeners = 0
        -- Time to loop over our device collection
        for _, dx in ipairs(deviceContent.items) do
          
          local d = dx
          local deviceId = d.serial_number
          
          -- This is only going to return a single "Place" / gateway. fix at some point to handle multiple gateways.
          if (d.device_family == "gateway") then
            ParentName = d.name
            ParentId = d.serial_number
          elseif (d.device_family == "garagedoor") or (d.device_family == "lamp") then 
            numOpeners = numOpeners + 1
            local deviceStateValue = d.state.door_state or d.state.light_state
            local openerName = d.name
            local deviceState = doorStatuses[deviceStateValue]
                        
            -- Keep track of all the openers along with their state
            table.insert(openerInfo, numOpeners, {
              DeviceId = deviceId,
              DeviceName = d.name,
              DeviceState = deviceState, 
              DeviceStateTransitioning = (deviceState == doorStatuses["opening"] or deviceState == doorStatuses["closing"]),
              OpenerName = openerName,
              DeviceFamily = d.device_family
            })
          
            numGDO = numGDO + (d.device_family == "garagedoor" and  1 or 0)
            numLights = numLights + (d.device_family == "lamp" and 1 or 0)
            
            debug(logPrefix.."Discovered "..d.device_family.." ["..d.name.."] in state "..deviceStateValue)
          else
            -- don't recognize this device.
            log(logPrefix.."Unknown Device Type Encountered.  Device Family: " .. (d.device_family or "NIL"),LOGLEVELS.WARN)
          end
        end
        
      else
        connectionResult = false
        connectionText = "Unsuccessful at connecting with device URL!"
        log(logPrefix.."Unsuccessful at connecting with device URL!",LOGLEVELS.ERROR)
      end
    
      if connectionResult == true then
        luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.NUM_DOORS, tostring(numGDO), gatewayDeviceId)
        luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.NUM_LIGHTS, tostring(numLights), gatewayDeviceId)
        debug("("..self.API_CONFIG.NAME.."::inspectDevices): Retrieved device data")
      else
        luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.NUM_DOORS, "ERROR: Could not initialize connection.", gatewayDeviceId)
        luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.NUM_LIGHTS, "        Check username and password.", gatewayDeviceId)	
        log("("..self.API_CONFIG.NAME.."::inspectDevices): FAILED to Retreived device data",LOGLEVELS.ERROR)
      end
      return connectionResult, openerInfo, ParentId, ParentName
    end
    
  } --end myQ API
  
end

local function refreshToken(logPrefix)

  if (os.difftime(os.time(),PLUGIN_CONFIG.LAST_TOKEN_REFRESH) > PLUGIN_CONFIG.MAX_TOKEN_AGE) then
    local result, tokenOrMsg, accountId = MYQ_API:login(PLUGIN_CONFIG.USERNAME, PLUGIN_CONFIG.PASSWORD)
    
    if (result == false) then
      local msg1 = "myQ Authorization Failed."
      local msg2 = "Check settings in myQ setup."
      
      luup.variable_set (MYQGATEWAY_SID,PLUGIN_VARS.NUM_DOORS,msg1,MyQGatewayID)
      luup.variable_set (MYQGATEWAY_SID,PLUGIN_VARS.NUM_LIGHTS,msg2,MyQGatewayID)
      task(msg1.." "..msg2, TASK_ERROR_PERM)
      
      log(logPrefix..msg1..": "..(tokenOrMsg or "No Text"), LOGLEVELS.ERROR)
      return false
    end
    
    PLUGIN_CONFIG.SECURITY_TOKEN = tokenOrMsg
    PLUGIN_CONFIG.ACCOUNTID = accountId
    PLUGIN_CONFIG.LAST_TOKEN_REFRESH = os.time()
    debug(logPrefix.."TOKEN RETRIEVAL SUCCESSFUL!!")
    luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.TOKEN_TIMESTAMP, UTIL:getFriendlyTimestamp(PLUGIN_CONFIG.LAST_TOKEN_REFRESH), MyQGatewayID)
    clearTask()
  else
    debug(logPrefix.."Token assumed valid: "..(os.difftime(os.time(), PLUGIN_CONFIG.LAST_TOKEN_REFRESH) / 60).." minutes old.")
  end
  
  debug(logPrefix.."Bearer "..PLUGIN_CONFIG.SECURITY_TOKEN)
end


function refreshDevices()
  local logPrefix = "("..PLUGIN_CONFIG.NAME.."::refreshDevices): "
  debug(logPrefix.."Starting status poll process.")
  
  local tokenResult = refreshToken(logPrefix)
  
  if (tokenResult == false) then
    return
  end
  
  local devicesStillTransitioning = false
        
  local connectionResult, openerInfo, _, _ = MYQ_API:inspectDevices(PLUGIN_CONFIG.SECURITY_TOKEN, PLUGIN_CONFIG.ACCOUNTID)

  if (connectionResult == false) then
    log(logPrefix.."Error on refresh doors, Exiting.",LOGLEVELS.ERROR)
    return
  end
  
  for i = 1, #openerInfo do
    local deviceId = openerInfo[i].DeviceId
    local childId = child_id_lookup_table[deviceId]
    debug(logPrefix.."Processing myQ device ["..(deviceId or "NIL").."] vera id ["..(childId or "NIL").."].")
    
    if openerInfo[i].DeviceFamily == "garagedoor" then
      
      luup.set_failure(0,childId)
      
      local deviceStatusValue = openerInfo[i].DeviceState
      local lastStatusText = luup.variable_get(GDO_SID, PLUGIN_VARS.STATUS,  childId)
      if (deviceStatusValue ~= lastStatusText) then
        luup.variable_set("urn:micasaverde-com:SecuritySensor1", PLUGIN_VARS.LAST_TRIP, os.time(), childId)
      end
      
      if (not openerInfo[i].DeviceStateTransitioning) then
        --remove any messages on the device.
        luup.device_message(deviceId, 22, "Completed", 0, PLUGIN_CONFIG.NAME)
      end
      
      devicesStillTransitioning = devicesStillTransitioning or openerInfo[i].DeviceStateTransitioning
      
      luup.variable_set(GDO_SID, PLUGIN_VARS.STATUS, deviceStatusValue, childId)
      
    else
      log(logPrefix..openerInfo[i].DeviceFamily.." devices not currently supported.",LOGLEVELS.WARN)						
    end
  end
  
  --Use the LastCheck variable to store the last time the doors were checked
  --The timestamp is set for when the last re-auth occurred
  luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.LAST_CHECK, UTIL:getFriendlyTimestamp(os.time()), MyQGatewayID)
  
  if (devicesStillTransitioning) then
    -- one or more devices are transitioning - queue a recheck
    luup.call_delay('refreshDevices', 5, "")
  end
  
  debug(logPrefix.."Poll process completed.")
end


function init(lul_device)
	if (MyQGatewayID == nil) then MyQGatewayID = lul_device end -- save the global device ID
	local isDisabled = luup.attr_get("disabled", lul_device)
  local logPrefix = "("..PLUGIN_CONFIG.NAME.."::init): "
	if ((isDisabled == 1) or (isDisabled == "1")) then
		log(logPrefix.."MyQ Gateway Plugin "..VERSION.." - ************** DISABLED **************", LOGLEVELS.WARN)
		PLUGIN_CONFIG.PLUGIN_DISABLED = true
		-- mark device as disabled
		return true, "Plugin Disabled.", "MyQGateway"
	end
	debug(logPrefix.."MyQ Gateway Plugin "..VERSION.." DeviceId " ..lul_device.." - ************** STARTING **************")
	-- Not sure why, but the task (status) seems to only work as expected when the function is called via timer.
	-- This allows a status message to appear for the device to allow the user to change settings, while at the same time
	-- does not "fail" the initiation.  this allows the user to make use of the UI to set the initial parameters
	-- instead of going to advanced tab and manually enter values which could be problematic for some.
	
	luup.variable_set (MYQGATEWAY_SID,"PLUGIN_VERSION",VERSION,MyQGatewayID)

	UTIL:initVar(MYQGATEWAY_SID, PLUGIN_VARS.USERNAME, "", MyQGatewayID)
	UTIL:initVar(MYQGATEWAY_SID, PLUGIN_VARS.PASSWORD, "", MyQGatewayID)
	UTIL:initVar(MYQGATEWAY_SID, PLUGIN_VARS.REFRESH_INTERVAL, PLUGIN_CONFIG.REFRESH_INTERVAL, MyQGatewayID)
	UTIL:initVar(MYQGATEWAY_SID, PLUGIN_VARS.REFRESH_AFTER_CHANGE_INTERVAL, PLUGIN_CONFIG.REFRESH_AFTER_CHANGE, MyQGatewayID)
	UTIL:initVar(MYQGATEWAY_SID, PLUGIN_VARS.DEBUG_MODE, "0", MyQGatewayID)
	UTIL:initVar(MYQGATEWAY_SID, PLUGIN_VARS.DEBUG_MODE_TEXT, "DISABLED", MyQGatewayID)

	luup.set_failure(0)

	if (DEVICE_ICONS) then
		DEVICE_ICONS:createIcons()
		DEVICE_ICONS = nil
	end

	-- load the PLUGIN_CONFIG variables before the deferred startup code runs
	PLUGIN_CONFIG.DEBUG_MODE = (tonumber(luup.variable_get(MYQGATEWAY_SID, "DEBUG_MODE", MyQGatewayID),10) == 1) and true or (PLUGIN_CONFIG.FORCE_DEBUG or false)
	debug(logPrefix.."MyQ Gateway Plugin Options - DEBUG_MODE ["..(PLUGIN_CONFIG.DEBUG_MODE and "ENABLED" or "DISABLED").."]")
	luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.DEBUG_MODE_TEXT, (PLUGIN_CONFIG.DEBUG_MODE and "ENABLED" or "DISABLED"), lul_device)

	luup.call_timer("startupDeferred", 1, "1", "")
	return true, "Plugin starting.", "MyQGateway"
end


function startupDeferred()

	local foundIssue = false --Any problem with username/password?
	local issueMessage = "ERROR: " --Our fancy error message
  local logPrefix = "("..PLUGIN_CONFIG.NAME.."::startupDeferred): "

	-- Grab our username and password from advanced
	-- Throw an error if any or both are not set below
	PLUGIN_CONFIG.USERNAME = luup.variable_get(MYQGATEWAY_SID, PLUGIN_VARS.USERNAME, MyQGatewayID) or PLUGIN_CONFIG.USERNAME
  
	if (PLUGIN_CONFIG.USERNAME == nil or PLUGIN_CONFIG.USERNAME == "") then
		luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.USERNAME, "", MyQGatewayID)
		foundIssue = true
		issueMessage = "Username not configured. "
		debug(logPrefix.."MyQ Username not specified.")
	end

	PLUGIN_CONFIG.PASSWORD = luup.variable_get(MYQGATEWAY_SID, PLUGIN_VARS.PASSWORD, MyQGatewayID) or PLUGIN_CONFIG.PASSWORD
	if (PLUGIN_CONFIG.PASSWORD == nil or PLUGIN_CONFIG.PASSWORD == "") then
		luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.PASSWORD, "", MyQGatewayID)
		foundIssue = true
		issueMessage = issueMessage .. "Password not configured."
		debug(logPrefix.."MyQ Password not specified.")
	end

	local refreshInterval = luup.variable_get(MYQGATEWAY_SID, PLUGIN_VARS.REFRESH_INTERVAL, MyQGatewayID)
	if (refreshInterval ~= nil and tonumber(refreshInterval) > 0) then
		debug(logPrefix.."Status refresh on your opener(s) will be called every:" .. refreshInterval)
	else
		debug(logPrefix.."Setting refresh interval to 120 sec by default")
		luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.REFRESH_INTERVAL, 120, MyQGatewayID)
	end

	local refreshAfterChangeInterval = luup.variable_get(MYQGATEWAY_SID, PLUGIN_VARS.REFRESH_AFTER_CHANGE_INTERVAL, MyQGatewayID)
	if (refreshAfterChangeInterval == nil) then
		luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.REFRESH_AFTER_CHANGE_INTERVAL, PLUGIN_CONFIG.REFRESH_AFTER_CHANGE, MyQGatewayID)
	end

	if (foundIssue == true) then
		local msg = issueMessage .. "  Check settings in myQ setup."
		task(msg, TASK_ERROR_PERM)
		luup.variable_set (MYQGATEWAY_SID,PLUGIN_VARS.NUM_DOORS,issueMessage,MyQGatewayID)
		luup.variable_set (MYQGATEWAY_SID,PLUGIN_VARS.NUM_LIGHTS,"",MyQGatewayID)
		debug(logPrefix.."MyQ Gateway Plugin "..VERSION.." - ********** STARTUP COMPLETE **********")
		return
	end
  
  debug(logPrefix.."ATTEMPTING INITIAL API LOGIN")
	
  local tokenResult = refreshToken(logPrefix)
  
  if (tokenResult == false) then
    return
  end
  
	local connectionResult, openerInfo, _, _ = MYQ_API:inspectDevices(PLUGIN_CONFIG.SECURITY_TOKEN, PLUGIN_CONFIG.ACCOUNTID, MyQGatewayID)
	
  if (connectionResult == false) then
		log(logPrefix.."No data retrieved.",LOGLEVELS.ERROR)
		log(logPrefix.."Unable to continue. Exiting.",LOGLEVELS.ERROR)
		debug(logPrefix.."MyQ Gateway Plugin "..VERSION.." - ********** STARTUP COMPLETE **********")
		return
	end

	debug(logPrefix.."Processing child devices.")
	local child_devices = luup.chdev.start(MyQGatewayID); -- create child devices

	debug(logPrefix.."Number of devices to process = ["..(#openerInfo or "NIL").."].")
	
	for i = 1, #openerInfo do -- Over the individual openers we go
		debug(logPrefix.."Processing device ["..(i or "NIL").."] name ["..(openerInfo[i].OpenerName or "NIL").."] ")
		if openerInfo[i].DeviceFamily == "garagedoor" then
      luup.chdev.append(MyQGatewayID, -- parent (this device)
      child_devices, -- Pointer from above start call
      openerInfo[i].DeviceId, -- the serial number will be the device id.
      openerInfo[i].OpenerName,
      GDO_DEVICE_TYPE, -- deviceType defined in device file
      "D_MyQGarageDoor1.xml", -- Device file
      "", -- No implementation file
      "", -- No parameters to set
      false) -- Not embedded child device (can go in any room)
			
		elseif openerInfo[i].DeviceFamily == "lamp" then
			luup.chdev.append(MyQGatewayID, -- parent (this device)
				child_devices, -- Pointer from above start call
				openerInfo[i].DeviceId, -- Our child ID taken from the opener device id
				openerInfo[i].OpenerName, -- Child device description
				LAMP_DEVICE_TYPE, -- deviceType defined in device file
				"D_BinaryLight1.xml", -- Device file
				"", -- No implementation file
				"", -- No parameters to set
				false) -- Not embedded child device (can go in any room)		
		end
	end
	luup.chdev.sync(MyQGatewayID, child_devices) -- any changes in configuration will cause a restart at this point
  
	for k, v in pairs(luup.devices) do
		-- if I am the parent device
		if v.device_num_parent == MyQGatewayID then
			debug(logPrefix.."child_id_lookup_table["..(v.id or "NIL").."] = "..(k or "NIL"))
			child_id_lookup_table[v.id] = k
			debug(logPrefix.."child_deviceid_lookup_table["..(k or "NIL").."] = "..(v.id or "NIL"))
			child_deviceid_lookup_table[k] = v.id
		end
	end
	
	-- Fire up our timer to check on auth code and door status
	-- periodic refresh of security token, no longer used.
	debug(logPrefix.."ID for MyQGateway is " .. (MyQGatewayID or "NIL"))
	luup.call_delay('refreshDevicesLoop', 10, "") --Wait 10 seconds to refresh devides for the first time.
  luup.set_failure(0)
	debug(logPrefix.."MyQ Gateway Plugin "..VERSION.." - ********** STARTUP COMPLETE **********")
	return true
end


function refreshDevicesLoop()
    local logPrefix = "("..PLUGIN_CONFIG.NAME.."::refreshDevicesLoop): "
    local refreshInterval = tonumber((luup.variable_get(MYQGATEWAY_SID, PLUGIN_VARS.REFRESH_INTERVAL, MyQGatewayID) or PLUGIN_CONFIG.REFRESH_INTERVAL))
    if (refreshInterval ~= nil and refreshInterval > 0) then
        if (refreshInterval < 10) then 
          refreshInterval = 10
          log(logPrefix.."Refreshing interval is too short, defaulting to minimum of "..refreshInterval.." seconds.",LOGLEVELS.WARN)
        else
          log(logPrefix.."Refreshing devices every "..refreshInterval.." seconds.",LOGLEVELS.WARN)
        end
        luup.call_delay('refreshDevicesLoop', refreshInterval, "")
    else
        log(logPrefix.."Devices will not update, configured refresh interval is invalid.",LOGLEVELS.WARN)
        luup.variable_set(MYQGATEWAY_SID, PLUGIN_VARS.REFRESH_INTERVAL, 0, MyQGatewayID)
    end
    refreshDevices()
end

